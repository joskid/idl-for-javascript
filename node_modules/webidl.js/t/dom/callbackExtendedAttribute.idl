/* Callback only applies to interfaces */
[Callback] module CallbackUsedOnModule {
};

/* Callback can only takes two possible values */
[Callback=Unknown] interface UnknownCallbackExtendedAttribute {
  void operation();
};

/* Callback not accepted with inheritance */
interface InheritedInterface {};
[Callback] interface CallbackUsedOnInheritingInterface : InheritedInterface {
  void operation();
};

/* Callback not accepted with Constructor or NamedConstructor */
[Callback, Constructor] interface CallbackUsedWithConstructor {
  void operation();
};

[Callback, NamedConstructor=foo] interface CallbackUsedWithNamedConstructor {
  void operation();
};

/* Callback used with a getter */
[Callback] interface CallbackUsedWithGetter {
  getter DOMString lookup(DOMString key);
};

/* Callback used with a setter */
[Callback] interface CallbackUsedWithSetter {
  setter void set(DOMString key, any value);
};

/* Callback used with a creator */
[Callback] interface CallbackUsedWithCreator {
  creator void set(DOMString key, any value);
};

/* Callback used with a deleter */
[Callback] interface CallbackUsedWithDeleter {
  deleter void remove(DOMString key);
};

/* Callback used with a stringifier */
[Callback] interface CallbackUsedWithStringifier {
  stringifier DOMString print();
};

/* Callback used with an attribute with PutForwards */
interface PutForwardInterface {
  attribute DOMString full;
};

[Callback] interface CallbackWithPutForwards {
  [PutForwards=full] readonly attribute PutForwardInterface name;
  void operation();
};

/* Callback used with an attribute with TreatNullAs */
[Callback] interface CallbackWithTreatNullAs {
  [TreatNullAs=EmptyString] attribute DOMString treatNullAsEmptyString;
  void operation();
};

/* Callback used with an attribute with TreatUndefinedAs */
[Callback] interface CallbackWithTreatUndefinedAs {
  [TreatUndefinedAs=Null] attribute DOMString? treatUndefinedAsNull;
  void operation();
};

/* Callback used with FunctionOnly or PropertyOnly, but including attributes */
[Callback=FunctionOnly] interface FunctionOnlyCallbackWithAttribute {
  attribute DOMString forbiddenAttribute;
  void operation();
};

/* Callback used with FunctionOnly or PropertyOnly, but with no operation */
[Callback=FunctionOnly] interface FunctionOnlyCallbackWithoutOperation {
};

/* Callback used with FunctionOnly or PropertyOnly, but with operations with different identifiers */
[Callback=PropertyOnly] interface PropertyOnlyCallbackWithDifferentOperations {
  void operation1();
  void operation2();
};


/* valid callbacks */
[Callback] interface CallbackInterfaceWithAttribute {
  attribute DOMString acceptedAttribute;
  void operation();
};


[Callback=FunctionOnly] interface FunctionOnlyCallbackExtendedAttribute {
  void operation();
  void operation(DOMString arg);
};

[Callback=PropertyOnly] interface PropertyOnlyCallbackExtendedAttribute {
  void operation();
  void operation(DOMString arg);
  void operation(DOMString arg, long arg2);
};