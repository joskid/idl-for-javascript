exports.Parser = (function(){
  /* Generated by PEG.js (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.grammarParser.SyntaxError| describing the error.
     */
    parse: function(input, start) {
      var funcs = {};

      var pos = 0;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function quoteString(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')        // backslash
          .replace(/"/g, '\\"')          // closing quote character
          .replace(/\r/g, '\\r')         // carriage return
          .replace(/\u2028/g, '\\u2028') // line separator
          .replace(/\u2029/g, '\\u2029') // paragraph separator
          .replace(/\n/g, '\\n')         // line feed
          + '"';
      }
      
      function arrayContains(array, value) {
        /*
         * Stupid IE does not have Array.prototype.indexOf, otherwise this
         * function would be a one-liner.
         */
        var length = array.length;
        for (var i = 0; i < length; i++) {
          if (array[i] === value) {
            return true;
          }
        }
        return false;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        if (!arrayContains(rightmostMatchFailuresExpected, failure)) {
          rightmostMatchFailuresExpected.push(failure);
        }
      }
      
      var parse_s = funcs['s'] = function parse_s(context) {
        var cacheKey = "s" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ 	\r\n]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[ 	\\r\\n]");
          }
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.substr(pos).match(/^[ 	\r\n]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (context.reportMatchFailures) {
                matchFailed("[ 	\\r\\n]");
              }
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_w = funcs['w'] = function parse_w(context) {
        var cacheKey = "w" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_s(context);
        var result0 = result1 !== null ? result1 : '';
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_identifier = funcs['identifier'] = function parse_identifier(context) {
        var cacheKey = "identifier" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[A-Z_a-z]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[A-Z_a-z]");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[0-9A-Z_a-z]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed("[0-9A-Z_a-z]");
            }
          }
          while (result4 !== null) {
            result3.push(result4);
            if (input.substr(pos).match(/^[0-9A-Z_a-z]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9A-Z_a-z]");
              }
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(nmstart, nmchars) { return nmstart + nmchars.join(""); })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_Type = funcs['Type'] = function parse_Type(context) {
        var cacheKey = "Type" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 3) === "any") {
          var result10 = "any";
          pos += 3;
        } else {
          var result10 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("any"));
          }
        }
        if (result10 !== null) {
          var result1 = result10;
        } else {
          if (input.substr(pos, 6) === "object") {
            var result9 = "object";
            pos += 6;
          } else {
            var result9 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("object"));
            }
          }
          if (result9 !== null) {
            var result1 = result9;
          } else {
            if (input.substr(pos, 7) === "boolean") {
              var result8 = "boolean";
              pos += 7;
            } else {
              var result8 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("boolean"));
              }
            }
            if (result8 !== null) {
              var result1 = result8;
            } else {
              if (input.substr(pos, 5) === "octet") {
                var result7 = "octet";
                pos += 5;
              } else {
                var result7 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("octet"));
                }
              }
              if (result7 !== null) {
                var result1 = result7;
              } else {
                if (input.substr(pos, 5) === "float") {
                  var result6 = "float";
                  pos += 5;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("float"));
                  }
                }
                if (result6 !== null) {
                  var result1 = result6;
                } else {
                  if (input.substr(pos, 6) === "double") {
                    var result5 = "double";
                    pos += 6;
                  } else {
                    var result5 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("double"));
                    }
                  }
                  if (result5 !== null) {
                    var result1 = result5;
                  } else {
                    if (input.substr(pos, 9) === "DOMString") {
                      var result4 = "DOMString";
                      pos += 9;
                    } else {
                      var result4 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("DOMString"));
                      }
                    }
                    if (result4 !== null) {
                      var result1 = result4;
                    } else {
                      var result3 = parse_UnsignedIntegerType(context);
                      if (result3 !== null) {
                        var result1 = result3;
                      } else {
                        var result2 = parse_ScopedName(context);
                        if (result2 !== null) {
                          var result1 = result2;
                        } else {
                          var result1 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        var result0 = result1 !== null
          ? (function(type) { return type; })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_UnsignedIntegerType = funcs['UnsignedIntegerType'] = function parse_UnsignedIntegerType(context) {
        var cacheKey = "UnsignedIntegerType" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 8) === "unsigned") {
          var result11 = "unsigned";
          pos += 8;
        } else {
          var result11 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("unsigned"));
          }
        }
        var result2 = result11 !== null ? result11 : '';
        if (result2 !== null) {
          var result3 = parse_s(context);
          if (result3 !== null) {
            var savedPos1 = pos;
            if (input.substr(pos, 4) === "long") {
              var result8 = "long";
              pos += 4;
            } else {
              var result8 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("long"));
              }
            }
            if (result8 !== null) {
              var result9 = parse_s(context);
              if (result9 !== null) {
                if (input.substr(pos, 4) === "long") {
                  var result10 = "long";
                  pos += 4;
                } else {
                  var result10 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("long"));
                  }
                }
                if (result10 !== null) {
                  var result7 = [result8, result9, result10];
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
            if (result7 !== null) {
              var result4 = result7;
            } else {
              if (input.substr(pos, 4) === "long") {
                var result6 = "long";
                pos += 4;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("long"));
                }
              }
              if (result6 !== null) {
                var result4 = result6;
              } else {
                if (input.substr(pos, 5) === "short") {
                  var result5 = "short";
                  pos += 5;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("short"));
                  }
                }
                if (result5 !== null) {
                  var result4 = result5;
                } else {
                  var result4 = null;;
                };
              };
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(uns, kind) { return (uns ? "unsigned " : "") + (kind.join ? kind.join("") : kind); })(result1[0], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_ScopedNameList = funcs['ScopedNameList'] = function parse_ScopedNameList(context) {
        var cacheKey = "ScopedNameList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_ScopedName(context);
        if (result2 !== null) {
          var result3 = [];
          var result4 = parse_ScopedNameListRest(context);
          while (result4 !== null) {
            result3.push(result4);
            var result4 = parse_ScopedNameListRest(context);
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(first, others) {   var ret = [first];
                      for (var i = 0, n = others.length; i < n; i++) { ret.push(others[i]); }
                      return ret; })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_ScopedNameListRest = funcs['ScopedNameListRest'] = function parse_ScopedNameListRest(context) {
        var cacheKey = "ScopedNameListRest" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_w(context);
        if (result2 !== null) {
          if (input.substr(pos, 1) === ",") {
            var result3 = ",";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(","));
            }
          }
          if (result3 !== null) {
            var result4 = parse_w(context);
            if (result4 !== null) {
              var result5 = parse_ScopedName(context);
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(rest) { return rest; })(result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_ScopedName = funcs['ScopedName'] = function parse_ScopedName(context) {
        var cacheKey = "ScopedName" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_AbsoluteScopedName(context);
        if (result3 !== null) {
          var result1 = result3;
        } else {
          var result2 = parse_RelativeScopedName(context);
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(name) { return name; })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_AbsoluteScopedName = funcs['AbsoluteScopedName'] = function parse_AbsoluteScopedName(context) {
        var cacheKey = "AbsoluteScopedName" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "::") {
          var result2 = "::";
          pos += 2;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("::"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_RelativeScopedName(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(rel) { return "::" + rel; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_RelativeScopedName = funcs['RelativeScopedName'] = function parse_RelativeScopedName(context) {
        var cacheKey = "RelativeScopedName" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_identifier(context);
        if (result2 !== null) {
          var result3 = [];
          var result4 = parse_ScopedNameRest(context);
          while (result4 !== null) {
            result3.push(result4);
            var result4 = parse_ScopedNameRest(context);
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name, rest) { return name + rest.join(""); })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_ScopedNameRest = funcs['ScopedNameRest'] = function parse_ScopedNameRest(context) {
        var cacheKey = "ScopedNameRest" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "::") {
          var result2 = "::";
          pos += 2;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("::"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_identifier(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name) { return name.join(""); })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_wicd = funcs['wicd'] = function parse_wicd(context) {
        var cacheKey = "wicd" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = [];
        var result5 = parse_ModuleStep(context);
        while (result5 !== null) {
          result2.push(result5);
          var result5 = parse_ModuleStep(context);
        }
        if (result2 !== null) {
          var result3 = [];
          var result4 = parse_OtherStep(context);
          while (result4 !== null) {
            result3.push(result4);
            var result4 = parse_OtherStep(context);
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(mods, rest) {
                      function isArray (obj) { return !!(obj && obj.concat && obj.unshift && !obj.callee); }
                      function flatten (arr) {
                          if (!isArray(arr)) return;
                          for (var i = 0, n = arr.length; i < n; i++) {
                              if (isArray(arr[i])) flatten(arr[i]);
                              else mods.push(arr[i]);
                          }
                      }
                      flatten(rest);
                      return mods;
                  })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_OtherStep = funcs['OtherStep'] = function parse_OtherStep(context) {
        var cacheKey = "OtherStep" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result5 = parse_InterfaceStep(context);
        if (result5 !== null) {
          var result1 = result5;
        } else {
          var result4 = parse_ExceptionStep(context);
          if (result4 !== null) {
            var result1 = result4;
          } else {
            var result3 = parse_TypeDefStep(context);
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_ImplementsStep(context);
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          };
        }
        var result0 = result1 !== null
          ? (function(step) { return step; })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_ModuleStep = funcs['ModuleStep'] = function parse_ModuleStep(context) {
        var cacheKey = "ModuleStep" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 8) === "/module:") {
          var result2 = "/module:";
          pos += 8;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("/module:"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_identifier(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name) { return { step: "module", name: name }; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_InterfaceStep = funcs['InterfaceStep'] = function parse_InterfaceStep(context) {
        var cacheKey = "InterfaceStep" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 11) === "/interface:") {
          var result2 = "/interface:";
          pos += 11;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("/interface:"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_identifier(context);
          if (result3 !== null) {
            var result8 = parse_ConstantStep(context);
            if (result8 !== null) {
              var result5 = result8;
            } else {
              var result7 = parse_AttributeStep(context);
              if (result7 !== null) {
                var result5 = result7;
              } else {
                var result6 = parse_OperationStep(context);
                if (result6 !== null) {
                  var result5 = result6;
                } else {
                  var result5 = null;;
                };
              };
            }
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name, subs) {
                      var ret = { step: "interface", name: name };
                      if (subs) return [ret, subs];
                      else return ret;
                  })(result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_ExceptionStep = funcs['ExceptionStep'] = function parse_ExceptionStep(context) {
        var cacheKey = "ExceptionStep" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 11) === "/exception:") {
          var result2 = "/exception:";
          pos += 11;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("/exception:"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_identifier(context);
          if (result3 !== null) {
            var result7 = parse_ConstantStep(context);
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_FieldStep(context);
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name, subs) {
                      var ret = { step: "exception", name: name };
                      if (subs) return [ret, subs];
                      else return ret;
                  })(result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_TypeDefStep = funcs['TypeDefStep'] = function parse_TypeDefStep(context) {
        var cacheKey = "TypeDefStep" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 9) === "/typedef:") {
          var result2 = "/typedef:";
          pos += 9;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("/typedef:"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_identifier(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name) { return { step: "typedef", name: name }; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_ImplementsStep = funcs['ImplementsStep'] = function parse_ImplementsStep(context) {
        var cacheKey = "ImplementsStep" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 12) === "/implements:") {
          var result2 = "/implements:";
          pos += 12;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("/implements:"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_ScopedName(context);
          if (result3 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("("));
              }
            }
            if (result4 !== null) {
              var result5 = parse_ScopedName(context);
              if (result5 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result6 = ")";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(")"));
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(target, source) { return { step: "implements", target: target, source: source }; })(result1[1], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_ConstantStep = funcs['ConstantStep'] = function parse_ConstantStep(context) {
        var cacheKey = "ConstantStep" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 10) === "/constant:") {
          var result2 = "/constant:";
          pos += 10;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("/constant:"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_identifier(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name) { return { step: "constant", name: name }; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_AttributeStep = funcs['AttributeStep'] = function parse_AttributeStep(context) {
        var cacheKey = "AttributeStep" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 11) === "/attribute:") {
          var result2 = "/attribute:";
          pos += 11;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("/attribute:"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_identifier(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name) { return { step: "attribute", name: name }; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_OperationStep = funcs['OperationStep'] = function parse_OperationStep(context) {
        var cacheKey = "OperationStep" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 11) === "/operation:") {
          var result2 = "/operation:";
          pos += 11;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("/operation:"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_identifier(context);
          if (result3 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("("));
              }
            }
            if (result4 !== null) {
              var result9 = parse_Arguments(context);
              var result5 = result9 !== null ? result9 : '';
              if (result5 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result6 = ")";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(")"));
                  }
                }
                if (result6 !== null) {
                  var result8 = parse_ArgumentStep(context);
                  var result7 = result8 !== null ? result8 : '';
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name, args, arg) {
                      var ret = { step: "operation", name: name, arguments: args };
                      if (arg) return [ret, arg];
                      else return ret;
                  })(result1[1], result1[3], result1[5])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_FieldStep = funcs['FieldStep'] = function parse_FieldStep(context) {
        var cacheKey = "FieldStep" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 7) === "/field:") {
          var result2 = "/field:";
          pos += 7;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("/field:"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_identifier(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name) { return { step: "field", name: name }; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_Arguments = funcs['Arguments'] = function parse_Arguments(context) {
        var cacheKey = "Arguments" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_Type(context);
        if (result2 !== null) {
          var result3 = [];
          var result4 = parse_ArgumentsRest(context);
          while (result4 !== null) {
            result3.push(result4);
            var result4 = parse_ArgumentsRest(context);
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(first, others) {   var ret = [first];
                      for (var i = 0, n = others.length; i < n; i++) { ret.push(others[i]); }
                      return ret; })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_ArgumentsRest = funcs['ArgumentsRest'] = function parse_ArgumentsRest(context) {
        var cacheKey = "ArgumentsRest" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === ",") {
          var result2 = ",";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(","));
          }
        }
        if (result2 !== null) {
          var result3 = parse_Type(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(rest) { return rest; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      var parse_ArgumentStep = funcs['ArgumentStep'] = function parse_ArgumentStep(context) {
        var cacheKey = "ArgumentStep" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 10) === "/argument:") {
          var result2 = "/argument:";
          pos += 10;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("/argument:"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_identifier(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(name) { return { step: "argument", name: name }; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          switch (failuresExpected.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpected[0];
            default:
              failuresExpected.sort();
              return failuresExpected.slice(0, failuresExpected.length - 1).join(', ')
                + ' or '
                + failuresExpected[failuresExpected.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quoteString(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parse_wicd({ reportMatchFailures: true });
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
